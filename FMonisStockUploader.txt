[PolygonFMonisHooks]FObject:FMonisHooks
""" Compiled: 2019-10-14 10:55:14 """

#__src_file__ = "extensions/monis/monis13/etc/FMonisHooks.py"
"""-------------------------------------------------------------------------------------------------------
MODULE
    FMonisHooks - 

    (c) Copyright 2016 SunGard FRONT ARENA. All rights reserved.

DESCRIPTION

-------------------------------------------------------------------------------------------------------"""
# For customer/project overrides
import acm


import FLogger
logger = FLogger.FLogger(__name__)


"""
Example code for Add Info identification: 

import acm

def get_unique_conv_from_oids(oid_list):
    return acm.FConvertible[max(oid_list)]

"""


"""
Example code for order book creation:

def CreateOrderBook(ins):
    # Pick appropriate market and tick size list for the convertible
    # market =
    # tickSizeList =

    info = acm.FMarketOrderBookCreateInfo(market)
    info.Currency(ins.Currency())
    info.Name(ins.Name())
    info.Isin(ins.Isin())
    info.ShortName(ins.ExternalId1())
    info.MinimumOrderQuantity(0)
    info.MaximumOrderQuantity(1000000)
    info.TickSizeList(tickSizeList)
    info.InsType(ins.InsType())
    info.Create()

"""

"""
Example code for defining custom structure of page groups for convertibles
when downloading using MDS

def DefinePageGroups(convertible, defaultPageGroupsAsList):
    region = defaultPageGroupsAsList[0]
    country = defaultPageGroupsAsList[1]
    result = [region, country]
    
    if country == 'Japan':
        result = ['Japan', ]
    elif country == 'United States':
        result = ['USA', ]    
    elif region == 'Asia':
        result = ['AEJ', country]
        
    result.append('Tier None')
    return result

"""


def _extract_fx_rate_and_save_price(cb):

    import PolygonMDSFxUtils
    
    cb = cb.OriginalOrSelf()
    fxInfo = PolygonMDSFxUtils.find_fx_info(cb)
    if fxInfo:
        logger.info("Polygon FMonisHooks save FX rate information "
            "{}".format(fxInfo))
        PolygonMDSFxUtils.save_fx_info_as_mds_price(fxInfo)

def _SetCBType(convertible, FCOM_convertible):
    cbType = FCOM_convertible.CBType()
    if cbType == 0:
        convertible.AdditionalInfo().CBType('Convertible Bond')
    elif cbType == 1:
        convertible.AdditionalInfo().CBType('Convertible Preferred')
    elif cbType == 3:
        convertible.AdditionalInfo().CBType('Mandatory Preferred')
    else:
        convertible.AdditionalInfo().CBType('Unknown Type')        
        
def _overrideMDSDefaultData(convertible, FCOM_convertible):
    import FCBPMUtils as utils
    params = utils.getFParameter('CBPM Parameters')
    lendSpread = None
    borrowSpread = None
    if params.HasValue('DefaultLendSpread'):
        lendSpread = params.GetNumber('DefaultLendSpread', FCOM_convertible.LendSpread())
    if params.HasValue('DefaultBorrowSpread'):
        borrowSpread = params.GetNumber('DefaultBorrowSpread', FCOM_convertible.BorrowSpread())
    if lendSpread or borrowSpread:
        print('Overridden the following default MDS import data for {}:'.format(FCOM_convertible.Name()))
        if lendSpread:
            FCOM_convertible.LendSpread(lendSpread)
            print('    Lend Spread   = {0}'.format(lendSpread))
        if borrowSpread:
            FCOM_convertible.BorrowSpread(borrowSpread)
            print('    Borrow Spread = {0}'.format(borrowSpread))

def _alwaysOverrideMDSDefaultData(convertible, FCOM_convertible):
    import FCBPMUtils as utils
    params = utils.getFParameter('CBPM Parameters')
    if params.HasValue('DefaultExCouponPeriod'):
        exCouponPeriod = params.GetNumber('DefaultExCouponPeriod', FCOM_convertible.ExCouponPeriod())
        FCOM_convertible.ExCouponPeriod(exCouponPeriod)
        convertible.ExCouponPeriodCount(exCouponPeriod)
        print('Overridden the following default MDS import data for {}:'.format(FCOM_convertible.Name()))
        print('    Ex Coupon Period = {0}'.format(exCouponPeriod))

def _convertibleAlreadyExists(convertible):
    import FMonisUploadUtils
    return FMonisUploadUtils.XmlHandler.GetXml(convertible)        


def CustomConvertibleAttributes(cb, FCOM_convertible, additionalObjects):
    convertible = cb

    # Extract FX Rate and Save Price
    _extract_fx_rate_and_save_price(cb)
    
    _SetCBType(cb, FCOM_convertible)

    # Blank out ISINs.  Polygon wants FA-Monis integration to be separated
    # from other integrations to FA as much as possible.  Therefore we need
    # the convertible bond created/updated/used by FA-Monis not to
    # create/update/use common identifier such as ISIN.
    logger.info("Polygon FMonisHooks blanks out convertible bond ISIN")
    cb.Isin("")
    
    bbgSymbol = FCOM_convertible.StockBloombergSymbol()
    if bbgSymbol:
        cb.FreeText(bbgSymbol.replace(' Equity', '').replace(' Index', ''))
    else:
        cb.FreeText('')
    
    FCOM_convertible.CrossCurrencyActive(False)
    print('set cross currency active to false')


    # Copy bond's ISIN information into additional info fields.
    # setattr(cb.AdditionalInfo(), "BondRegisteredISIN",
    #     FCOM_convertible.BondRegisteredISIN())
    # setattr(cb.AdditionalInfo(), "Bond144aISIN",
    #     FCOM_convertible.Bond144aISIN())
    # setattr(cb.AdditionalInfo(), "BondRegSISIN",
    #     FCOM_convertible.BondRegSISIN())
    # setattr(cb.AdditionalInfo(), "BondOtherISIN",
    #     FCOM_convertible.BondOtherISIN())

    # Manually linking ISIN and Bloomberg Symbol as instrument aliases.
    # Polygon wants FA-Monis integration to be separated from other
    # integrations to FA as much as possible, so we set
    # FMonisUploadParameters not to use these alternative identifiers.
    # As a result, Monis integration do not copy these identifiers into
    # FA so we need to manually get those we wants.
    bbgSymbol = FCOM_convertible.BondBloombergCode()
    if bbgSymbol:
        assert acm.FInstrAliasType["Monis_FIGI"], (
            "Instrument Alias Type 'Monis_FIGI' must have existed."
        )
        cbOid = cb.OriginalOrSelf().Oid()
        ias = acm.FInstrumentAlias.Select(
            "instrument={} and type='Monis_FIGI'".format(cbOid))
        if not ias:
            alias = acm.FInstrumentAlias()
            alias.Instrument(cb)
            alias.Type("Monis_FIGI")
        else:
            alias = ias[0]
        if alias.Alias() != bbgSymbol:
            alias.Alias(bbgSymbol)
            additionalObjects.Add(alias)

    # Update Additional Info MonisStatus
    aisMonisStatus = acm.FAdditionalInfoSpec["MonisStatus"]
    assert aisMonisStatus, (
        "Additional Info Spec 'MonisStatus' not found."
    )
    aiMonisStatus = aisMonisStatus.AddInfo(
        cb.OriginalOrSelf())
    if not aiMonisStatus:
        aiMonisStatus = acm.FAdditionalInfo()
        aiMonisStatus.AddInf(aisMonisStatus)
        aiMonisStatus.Recaddr(cb.OriginalOrSelf().Oid())
    if aiMonisStatus.FieldValue() != FCOM_convertible.Status():
        aiMonisStatus.FieldValue(FCOM_convertible.Status())
    if aiMonisStatus.IsInfant() or aiMonisStatus.IsModified():
        additionalObjects.Add(aiMonisStatus)

    # Update Additional Info MDSLastUpdatedDate
    aisMDSLastUpdateDate = acm.FAdditionalInfoSpec["MDSLastUpdateDate"]
    assert aisMDSLastUpdateDate, (
        "Additional Info Spec 'MDSLastUpdateDate' not found."
    )
    aiMDSLastUpdateDate = aisMDSLastUpdateDate.AddInfo(
        cb.OriginalOrSelf())
    if not aiMDSLastUpdateDate:
        aiMDSLastUpdateDate = acm.FAdditionalInfo()
        aiMDSLastUpdateDate.AddInf(aisMDSLastUpdateDate)
        aiMDSLastUpdateDate.Recaddr(cb.OriginalOrSelf().Oid())
    if aiMDSLastUpdateDate.FieldValue() != acm.Time.DateToday():
        aiMDSLastUpdateDate.FieldValue(acm.Time.DateToday())
    if aiMDSLastUpdateDate.IsInfant() or aiMDSLastUpdateDate.IsModified():
        additionalObjects.Add(aiMDSLastUpdateDate)
        
    import FCBPMUtils as utils

    if not utils.GetPriceEntry(convertible, 'DeltaNuke'):
        # Create a blank 'DeltaNuke' price entry for the CB ready to be populated by the user later
        utils.CreatePriceEntry(convertible, 'DeltaNuke')
        
    if not _convertibleAlreadyExists(convertible):
        _overrideMDSDefaultData(convertible, FCOM_convertible)
    _alwaysOverrideMDSDefaultData(convertible, FCOM_convertible)
        


"""
Example code for setting custom attributes on underlyings during the MDS upload. 
Add objects to the additionalObjects array to save them in the same transaction as the underlying.
"""


def CustomUnderlyingAttributes(underlying, FCOM_convertible, additionalObjects):

    # Blank out ISINs.  Polygon wants FA-Monis integration to be separated
    # from other integrations to FA as much as possible.  Therefore we need
    # the stock created/updated/used by FA-Monis not to
    # create/update/use common identifier such as ISIN.  
    underlying.Isin("")
    
    # Override stock name, add "MONIS:" in the front.
    stockName = FCOM_convertible.StockName()
    if not stockName.startswith("MONIS:"):
        stockName = "MONIS: {}".format(stockName)
    underlying.Name(stockName)

    # Update Instrument Alias Monis_BLOOMBERGSYMBOL_UND
    bbgSymbol = FCOM_convertible.StockBloombergSymbol()
    if bbgSymbol:
        assert acm.FInstrAliasType["Monis_BLOOMBERGSYMBOL_UND"], (
            "Instrument Alias Type 'Monis_BLOOMBERGSYMBOL_UND' must have existed."
        )
        stkOid = underlying.OriginalOrSelf().Oid()
        ias = acm.FInstrumentAlias.Select(
            "instrument={} and type='Monis_BLOOMBERGSYMBOL_UND'".format(stkOid))      
        if not ias:
            alias = acm.FInstrumentAlias()
            alias.Instrument(underlying)
            alias.Type("Monis_BLOOMBERGSYMBOL_UND")
        else:
            alias = ias[0]
        if alias.Alias() != bbgSymbol:
            alias.Alias(bbgSymbol)
            additionalObjects.Add(alias)

    # Update Additional Info MDSLastUpdatedDate
    aisMDSLastUpdateDate = acm.FAdditionalInfoSpec["MDSLastUpdateDate"]
    assert aisMDSLastUpdateDate, (
        "Additional Info Spec 'MDSLastUpdateDate' not found."
    )
    aiMDSLastUpdateDate = aisMDSLastUpdateDate.AddInfo(
        underlying.OriginalOrSelf())
    if not aiMDSLastUpdateDate:
        aiMDSLastUpdateDate = acm.FAdditionalInfo()
        aiMDSLastUpdateDate.AddInf(aisMDSLastUpdateDate)
        aiMDSLastUpdateDate.Recaddr(underlying.OriginalOrSelf().Oid())
    if aiMDSLastUpdateDate.FieldValue() != acm.Time.DateToday():
        aiMDSLastUpdateDate.FieldValue(acm.Time.DateToday())
    if aiMDSLastUpdateDate.IsInfant() or aiMDSLastUpdateDate.IsModified():
        additionalObjects.Add(aiMDSLastUpdateDate)


"""
    import acm
    a_type = acm.FInstrAliasType()
    a_type.Name('Custom Alias Type')
    a_type.AliasTypeDescription('Custom Upload Type')
    additionalObjects.Add(a_type)
    alias = acm.FInstrumentAlias()
    alias.Instrument(underlying)
    alias.Type(a_type)
    alias.Alias(100)
    additionalObjects.Add(alias)

"""


#Example code for defining custom retrieval of float rate references
#(the old function get_float_rate_index in FMonisCustomisations is obsolete and replaced by this function)

def GetFloatRateReference(currName, tenor, tenorType = 'M'):
    ''' Returns the rate index based on tenor '''
    if tenorType[0] == 'Y':
        tenor = tenor * 12
    # Infer reference rate from currency
    referenceRate = {'USD': 'LIBOR', 'GBP': 'LIBOR', 'EUR': 'EURIBOR', 'SEK': 'STIBOR', 'DKK': 'CIBOR', 'AED': 'AIDIBOR', 'BRL': 'BRAZIBOR'}.get(currName, 'LIBOR')
    indexRateInsid = '%s/%s/%sM' % (currName, referenceRate, tenor)
    rateIndex = acm.FRateIndex[indexRateInsid]
    indexRateInsid2 = '%s/%s/%02dM' % (currName, referenceRate, tenor)
    rateIndex2 = acm.FRateIndex[indexRateInsid2]
    if rateIndex:
        return rateIndex
    elif rateIndex2:
        return rateIndex2
    else: 
        raise Exception('Could not find rate index for %s in ADS' % indexRateInsid)

"""
#This hook should return an existing irs which is to be connected to input ascot in the ascot upgrade process
def GetAscotIRS(ascot):
    return None
"""
"""
#This hook enables the user to set custom attributes on IRS:es created in the ascot upgrade process
def UpdateCustomIRSAttributes(ascot, irs):
    irs.Name = 'AS_Swap/' + irs.SuggestName()
    return irs
"""
"""
This variable enables a custom choice of fields for the Create New Convertible quick GUI. For available field names, look
at the class FCOMIMonisConvertibleBond in the AEF Browser.

customGUIFields = ('Name', 'StockName', 'Denomination', 'QuoteFormat', 'CouponRate', 'MaturityDate',
                        'LastConversionDate', 'AnnualDividendYield', 'CreditSpread', 'FlatVolatility',
                        'StockBorrowCost')
"""
"""

def GetCBRegStatuses(originalComObj):
    ''' Return the set of reg statuses to split an original COM object into. '''
    return ['RegRegistered', 'Reg144a',]

"""

...

